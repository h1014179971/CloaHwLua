//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class SeekerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Seeker), typeof(Pathfinding.VersionedMonoBehaviour));
		L.RegFunction("GetCurrentPath", GetCurrentPath);
		L.RegFunction("CancelCurrentPathRequest", CancelCurrentPathRequest);
		L.RegFunction("OnDestroy", OnDestroy);
		L.RegFunction("ReleaseClaimedPath", ReleaseClaimedPath);
		L.RegFunction("RegisterModifier", RegisterModifier);
		L.RegFunction("DeregisterModifier", DeregisterModifier);
		L.RegFunction("PostProcess", PostProcess);
		L.RegFunction("RunModifiers", RunModifiers);
		L.RegFunction("IsDone", IsDone);
		L.RegFunction("StartPath", StartPath);
		L.RegFunction("StartMultiTargetPath", StartMultiTargetPath);
		L.RegFunction("OnDrawGizmos", OnDrawGizmos);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("drawGizmos", get_drawGizmos, set_drawGizmos);
		L.RegVar("detailedGizmos", get_detailedGizmos, set_detailedGizmos);
		L.RegVar("startEndModifier", get_startEndModifier, set_startEndModifier);
		L.RegVar("traversableTags", get_traversableTags, set_traversableTags);
		L.RegVar("tagPenalties", get_tagPenalties, set_tagPenalties);
		L.RegVar("pathCallback", get_pathCallback, set_pathCallback);
		L.RegVar("preProcessPath", get_preProcessPath, set_preProcessPath);
		L.RegVar("postProcessPath", get_postProcessPath, set_postProcessPath);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetCurrentPath(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Seeker obj = (Seeker)ToLua.CheckObject<Seeker>(L, 1);
			Pathfinding.Path o = obj.GetCurrentPath();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CancelCurrentPathRequest(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				Seeker obj = (Seeker)ToLua.CheckObject<Seeker>(L, 1);
				obj.CancelCurrentPathRequest();
				return 0;
			}
			else if (count == 2)
			{
				Seeker obj = (Seeker)ToLua.CheckObject<Seeker>(L, 1);
				bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
				obj.CancelCurrentPathRequest(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Seeker.CancelCurrentPathRequest");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnDestroy(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Seeker obj = (Seeker)ToLua.CheckObject<Seeker>(L, 1);
			obj.OnDestroy();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReleaseClaimedPath(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Seeker obj = (Seeker)ToLua.CheckObject<Seeker>(L, 1);
			obj.ReleaseClaimedPath();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RegisterModifier(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Seeker obj = (Seeker)ToLua.CheckObject<Seeker>(L, 1);
			Pathfinding.IPathModifier arg0 = (Pathfinding.IPathModifier)ToLua.CheckObject<Pathfinding.IPathModifier>(L, 2);
			obj.RegisterModifier(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DeregisterModifier(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Seeker obj = (Seeker)ToLua.CheckObject<Seeker>(L, 1);
			Pathfinding.IPathModifier arg0 = (Pathfinding.IPathModifier)ToLua.CheckObject<Pathfinding.IPathModifier>(L, 2);
			obj.DeregisterModifier(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PostProcess(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Seeker obj = (Seeker)ToLua.CheckObject<Seeker>(L, 1);
			Pathfinding.Path arg0 = (Pathfinding.Path)ToLua.CheckObject<Pathfinding.Path>(L, 2);
			obj.PostProcess(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RunModifiers(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			Seeker obj = (Seeker)ToLua.CheckObject<Seeker>(L, 1);
			Seeker.ModifierPass arg0 = (Seeker.ModifierPass)ToLua.CheckObject(L, 2, typeof(Seeker.ModifierPass));
			Pathfinding.Path arg1 = (Pathfinding.Path)ToLua.CheckObject<Pathfinding.Path>(L, 3);
			obj.RunModifiers(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsDone(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Seeker obj = (Seeker)ToLua.CheckObject<Seeker>(L, 1);
			bool o = obj.IsDone();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int StartPath(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				Seeker obj = (Seeker)ToLua.CheckObject<Seeker>(L, 1);
				Pathfinding.Path arg0 = (Pathfinding.Path)ToLua.CheckObject<Pathfinding.Path>(L, 2);
				Pathfinding.Path o = obj.StartPath(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<UnityEngine.Vector3, UnityEngine.Vector3>(L, 2))
			{
				Seeker obj = (Seeker)ToLua.CheckObject<Seeker>(L, 1);
				UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
				UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 3);
				Pathfinding.Path o = obj.StartPath(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<Pathfinding.Path, Pathfinding.OnPathDelegate>(L, 2))
			{
				Seeker obj = (Seeker)ToLua.CheckObject<Seeker>(L, 1);
				Pathfinding.Path arg0 = (Pathfinding.Path)ToLua.ToObject(L, 2);
				Pathfinding.OnPathDelegate arg1 = (Pathfinding.OnPathDelegate)ToLua.ToObject(L, 3);
				Pathfinding.Path o = obj.StartPath(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 4 && TypeChecker.CheckTypes<UnityEngine.Vector3, UnityEngine.Vector3, Pathfinding.OnPathDelegate>(L, 2))
			{
				Seeker obj = (Seeker)ToLua.CheckObject<Seeker>(L, 1);
				UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
				UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 3);
				Pathfinding.OnPathDelegate arg2 = (Pathfinding.OnPathDelegate)ToLua.ToObject(L, 4);
				Pathfinding.Path o = obj.StartPath(arg0, arg1, arg2);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 4 && TypeChecker.CheckTypes<Pathfinding.Path, Pathfinding.OnPathDelegate, int>(L, 2))
			{
				Seeker obj = (Seeker)ToLua.CheckObject<Seeker>(L, 1);
				Pathfinding.Path arg0 = (Pathfinding.Path)ToLua.ToObject(L, 2);
				Pathfinding.OnPathDelegate arg1 = (Pathfinding.OnPathDelegate)ToLua.ToObject(L, 3);
				int arg2 = (int)LuaDLL.lua_tonumber(L, 4);
				Pathfinding.Path o = obj.StartPath(arg0, arg1, arg2);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 5)
			{
				Seeker obj = (Seeker)ToLua.CheckObject<Seeker>(L, 1);
				UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
				UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 3);
				Pathfinding.OnPathDelegate arg2 = (Pathfinding.OnPathDelegate)ToLua.CheckDelegate<Pathfinding.OnPathDelegate>(L, 4);
				int arg3 = (int)LuaDLL.luaL_checknumber(L, 5);
				Pathfinding.Path o = obj.StartPath(arg0, arg1, arg2, arg3);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Seeker.StartPath");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int StartMultiTargetPath(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 4 && TypeChecker.CheckTypes<UnityEngine.Vector3, UnityEngine.Vector3[], bool>(L, 2))
			{
				Seeker obj = (Seeker)ToLua.CheckObject<Seeker>(L, 1);
				UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
				UnityEngine.Vector3[] arg1 = ToLua.ToStructArray<UnityEngine.Vector3>(L, 3);
				bool arg2 = LuaDLL.lua_toboolean(L, 4);
				Pathfinding.MultiTargetPath o = obj.StartMultiTargetPath(arg0, arg1, arg2);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 4 && TypeChecker.CheckTypes<UnityEngine.Vector3[], UnityEngine.Vector3, bool>(L, 2))
			{
				Seeker obj = (Seeker)ToLua.CheckObject<Seeker>(L, 1);
				UnityEngine.Vector3[] arg0 = ToLua.ToStructArray<UnityEngine.Vector3>(L, 2);
				UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 3);
				bool arg2 = LuaDLL.lua_toboolean(L, 4);
				Pathfinding.MultiTargetPath o = obj.StartMultiTargetPath(arg0, arg1, arg2);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 5 && TypeChecker.CheckTypes<UnityEngine.Vector3, UnityEngine.Vector3[], bool, Pathfinding.OnPathDelegate>(L, 2))
			{
				Seeker obj = (Seeker)ToLua.CheckObject<Seeker>(L, 1);
				UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
				UnityEngine.Vector3[] arg1 = ToLua.ToStructArray<UnityEngine.Vector3>(L, 3);
				bool arg2 = LuaDLL.lua_toboolean(L, 4);
				Pathfinding.OnPathDelegate arg3 = (Pathfinding.OnPathDelegate)ToLua.ToObject(L, 5);
				Pathfinding.MultiTargetPath o = obj.StartMultiTargetPath(arg0, arg1, arg2, arg3);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 5 && TypeChecker.CheckTypes<UnityEngine.Vector3[], UnityEngine.Vector3, bool, Pathfinding.OnPathDelegate>(L, 2))
			{
				Seeker obj = (Seeker)ToLua.CheckObject<Seeker>(L, 1);
				UnityEngine.Vector3[] arg0 = ToLua.ToStructArray<UnityEngine.Vector3>(L, 2);
				UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 3);
				bool arg2 = LuaDLL.lua_toboolean(L, 4);
				Pathfinding.OnPathDelegate arg3 = (Pathfinding.OnPathDelegate)ToLua.ToObject(L, 5);
				Pathfinding.MultiTargetPath o = obj.StartMultiTargetPath(arg0, arg1, arg2, arg3);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 6 && TypeChecker.CheckTypes<UnityEngine.Vector3, UnityEngine.Vector3[], bool, Pathfinding.OnPathDelegate, int>(L, 2))
			{
				Seeker obj = (Seeker)ToLua.CheckObject<Seeker>(L, 1);
				UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
				UnityEngine.Vector3[] arg1 = ToLua.ToStructArray<UnityEngine.Vector3>(L, 3);
				bool arg2 = LuaDLL.lua_toboolean(L, 4);
				Pathfinding.OnPathDelegate arg3 = (Pathfinding.OnPathDelegate)ToLua.ToObject(L, 5);
				int arg4 = (int)LuaDLL.lua_tonumber(L, 6);
				Pathfinding.MultiTargetPath o = obj.StartMultiTargetPath(arg0, arg1, arg2, arg3, arg4);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 6 && TypeChecker.CheckTypes<UnityEngine.Vector3[], UnityEngine.Vector3, bool, Pathfinding.OnPathDelegate, int>(L, 2))
			{
				Seeker obj = (Seeker)ToLua.CheckObject<Seeker>(L, 1);
				UnityEngine.Vector3[] arg0 = ToLua.ToStructArray<UnityEngine.Vector3>(L, 2);
				UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 3);
				bool arg2 = LuaDLL.lua_toboolean(L, 4);
				Pathfinding.OnPathDelegate arg3 = (Pathfinding.OnPathDelegate)ToLua.ToObject(L, 5);
				int arg4 = (int)LuaDLL.lua_tonumber(L, 6);
				Pathfinding.MultiTargetPath o = obj.StartMultiTargetPath(arg0, arg1, arg2, arg3, arg4);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Seeker.StartMultiTargetPath");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnDrawGizmos(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Seeker obj = (Seeker)ToLua.CheckObject<Seeker>(L, 1);
			obj.OnDrawGizmos();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_drawGizmos(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Seeker obj = (Seeker)o;
			bool ret = obj.drawGizmos;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index drawGizmos on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_detailedGizmos(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Seeker obj = (Seeker)o;
			bool ret = obj.detailedGizmos;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index detailedGizmos on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_startEndModifier(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Seeker obj = (Seeker)o;
			Pathfinding.StartEndModifier ret = obj.startEndModifier;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index startEndModifier on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_traversableTags(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Seeker obj = (Seeker)o;
			int ret = obj.traversableTags;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index traversableTags on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_tagPenalties(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Seeker obj = (Seeker)o;
			int[] ret = obj.tagPenalties;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index tagPenalties on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_pathCallback(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Seeker obj = (Seeker)o;
			Pathfinding.OnPathDelegate ret = obj.pathCallback;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index pathCallback on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_preProcessPath(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Seeker obj = (Seeker)o;
			Pathfinding.OnPathDelegate ret = obj.preProcessPath;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index preProcessPath on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_postProcessPath(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Seeker obj = (Seeker)o;
			Pathfinding.OnPathDelegate ret = obj.postProcessPath;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index postProcessPath on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_drawGizmos(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Seeker obj = (Seeker)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.drawGizmos = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index drawGizmos on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_detailedGizmos(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Seeker obj = (Seeker)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.detailedGizmos = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index detailedGizmos on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_startEndModifier(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Seeker obj = (Seeker)o;
			Pathfinding.StartEndModifier arg0 = (Pathfinding.StartEndModifier)ToLua.CheckObject<Pathfinding.StartEndModifier>(L, 2);
			obj.startEndModifier = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index startEndModifier on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_traversableTags(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Seeker obj = (Seeker)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.traversableTags = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index traversableTags on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_tagPenalties(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Seeker obj = (Seeker)o;
			int[] arg0 = ToLua.CheckNumberArray<int>(L, 2);
			obj.tagPenalties = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index tagPenalties on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_pathCallback(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Seeker obj = (Seeker)o;
			Pathfinding.OnPathDelegate arg0 = (Pathfinding.OnPathDelegate)ToLua.CheckDelegate<Pathfinding.OnPathDelegate>(L, 2);
			obj.pathCallback = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index pathCallback on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_preProcessPath(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Seeker obj = (Seeker)o;
			Pathfinding.OnPathDelegate arg0 = (Pathfinding.OnPathDelegate)ToLua.CheckDelegate<Pathfinding.OnPathDelegate>(L, 2);
			obj.preProcessPath = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index preProcessPath on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_postProcessPath(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Seeker obj = (Seeker)o;
			Pathfinding.OnPathDelegate arg0 = (Pathfinding.OnPathDelegate)ToLua.CheckDelegate<Pathfinding.OnPathDelegate>(L, 2);
			obj.postProcessPath = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index postProcessPath on a nil value");
		}
	}
}

